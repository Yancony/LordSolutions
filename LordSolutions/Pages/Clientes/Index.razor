@page "/clientes"

@if (!ShowForm)
{
	<h3>Clientes (@Clientes.Count)</h3>
	<div class="mb-2">
		<button class="btn btn-success btn-sm"
			@onclick="()=>{ShowForm = !ShowForm;}">
			Agregar
		</button>
	</div>
}

<div class="container">
	@if(ShowForm)
	{
		<h3>@Tituloform</h3>
		<EditForm Model="request" OnValidSubmit="Send">
			<div class="mb-3">
				<label class="form-label">Nombre</label>
				<InputText class="card" @bind-Value="@request.Nombre"></InputText>
			</div>
			<div class="mb-3">
				<label class="form-label">Telefono</label>
				<InputText class="card" @bind-Value="@request.Telefono"></InputText>
			</div>
			<div class="mb-3">
				<label class="form-label">Direccion</label>
				<InputText class="card" @bind-Value="@request.Direccion"></InputText>
			</div>
			<div class="btn-group">
				<button type="submit" class="btn btn-outline-success btn-sm">Guardar</button>
				<button @onclick="Cancelar" class="btn btn-outline-danger btn-sm">Cancelar</button>
			</div>
		</EditForm>
		<br/>
	}
	else
	{
		@foreach (var cliente in Clientes)
		{
			<div class="card" style="width:18rem;">
				<div class="card-body">
					<div class="card-text">
						<label><b>Nombre:</b> @cliente.Nombre</label>
					</div>
					<div class="card-text">
						<label><b>Telefeno:</b> @cliente.Telefono</label>
					</div>
					<div class="card-text">
						<label><b>Direccion:</b> @cliente.Direccion</label>
					</div>
					<button @onclick="()=>Seleccionar(cliente.Id)"
					class="btn btn-warning btn-sm">
						Editar
					</button>
					<button @onclick="()=>Eliminar(cliente)"
					class="btn btn-danger btn-sm">
						Eliminar
					</button>
				</div>
			</div>
		}
	}
</div>

@code {
	public string Tituloform => request.Id == 0 ? 
	"Agregar cliente" : "Modificar cliente";

	public bool ShowForm { get; set; } = false;
	public string Filtro { get; set; } = "";
	public List<ClienteResponse> Clientes { get; set; }
		= new List<ClienteResponse>();

	public ClienteRequest request { get; set; } = new ClienteRequest();

	void Cancelar()
	{
		request = new ClienteRequest();
		ShowForm = false;
	}

	async Task CargarClientes()
	{
		var resultado =
		await clienteServices.Consultar(Filtro);
		if (resultado.Success)
		{
			Clientes = resultado.Data!;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await CargarClientes();
	}

	public async Task Send()
	{
		if(request.Id == 0)
		{
			//Debo regristrar el cliente
			var r = await clienteServices.Crear(request);
			if(r.Success)
			{
				Cancelar();
				await CargarClientes();
				StateHasChanged();
			}
		}
		else
		{
			//Debo solicitar modificar el cliente...
			var r = await clienteServices.Modificar(request);
			if (r.Success)
			{
				Cancelar();
				await CargarClientes();
				StateHasChanged();
			}
		}
	}
	public void Seleccionar(int Id)
	{
		ShowForm = true;
		request = Clientes
		.Where(c => c.Id == Id)
		.Select(c => c.ToRequest())
		.FirstOrDefault()??new ClienteRequest();
	}
	public async Task Eliminar(ClienteResponse cliente)
	{
		var resultado = await clienteServices.Eliminar(cliente.ToRequest());
		if (resultado.Success)
		{
			await CargarClientes();
			StateHasChanged();
		}
	}
}